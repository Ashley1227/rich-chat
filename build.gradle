plugins {
	id 'fabric-loom' version '0.2.7-SNAPSHOT'
	id "com.wynprice.cursemaven" version "2.1.4"
	id 'com.github.johnrengelman.shadow' version '5.2.0'
}
compileJava {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

archivesBaseName = project.archives_base_name
version = "${mod_version}+${project.minecraft_version}"
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:1.10.2+build.32";

	shadow "com.vladsch.flexmark:flexmark:${project.flexmark_version}"
	implementation "com.vladsch.flexmark:flexmark:${project.flexmark_version}"

	shadow "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:${project.flexmark_version}"
	implementation "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:${project.flexmark_version}"

	shadow "com.vladsch.flexmark:flexmark-ext-autolink:${project.flexmark_version}"
	implementation "com.vladsch.flexmark:flexmark-ext-autolink:${project.flexmark_version}"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}
shadowJar {
	relocate 'com.vladsch', 'io.github.ashley1227.repackage.com.vladsch'
	relocate 'org.nibor', 'io.github.ashley1227.repackage.org.nibor'
	configurations = [project.configurations.shadow]
	classifier = "shadow"
}
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "${project.group}.${project.archivesBaseName}.shadow"
}
tasks.shadowJar.dependsOn tasks.relocateShadowJar

remapJar {
	dependsOn shadowJar
	input.set shadowJar.archiveFile.get()
}